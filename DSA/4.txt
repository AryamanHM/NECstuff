Linear Hashing: In linear hashing, collisions are resolved by probing the next available slot in a linear manner. If the calculated hash index is already occupied, the algorithm checks the next slot until it finds an empty slot. The linear probing can be performed using various strategies such as linearly incrementing the index by a fixed value (e.g., 1) or using a linear function to determine the next probing position. Linear hashing has the advantage of simplicity and easy implementation but can suffer from clustering issues, where consecutive collisions result in longer probe sequences and decreased performance.

Quadratic Hashing: Quadratic hashing addresses collisions by using a quadratic function to determine the next probing position. Instead of linearly incrementing the index, the algorithm uses a quadratic formula (e.g., incrementing by 1, 4, 9, 16, etc.) to calculate the next slot to probe. This approach helps alleviate clustering and reduces the likelihood of repeated collisions, as it distributes the entries more evenly across the hash table. However, quadratic hashing can still suffer from clustering to some extent.

Mid-Square Hashing: Mid-square hashing involves squaring the input key, extracting a portion of the squared value, and using that as the hash index. The selected portion is usually taken from the middle, hence the name "mid-square." For example, if the squared value is 2345678, the middle digits (456) might be used as the hash index. Mid-square hashing can provide good distribution of keys if implemented correctly, but it may require additional bit manipulation to extract the desired portion of the squared value. It also requires careful consideration of the hash table size to avoid clustering and ensure a uniform distribution.

Each hashing technique has its own characteristics and trade-offs. The choice of which technique to use depends on factors such as the expected data distribution, the desired performance, the available memory, and the collision resolution requirements. Other advanced hashing techniques, such as chaining with linked lists or using open addressing methods like double hashing, can also be employed based on the specific needs of the application.